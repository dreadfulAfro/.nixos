# Auto-generated using compose2nix v0.3.3-pre.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."jellyseerr" = {
    image = "ghcr.io/fallenbagel/jellyseerr:latest";
    environment = {
      "LOG_LEVEL" = "debug";
      "PGID" = "1000";
      "PORT" = "5055";
      "PUID" = "1008";
      "TZ" = "Europe/Berlin";
    };
    volumes = [
      "/srv/data1tb/jellyseerr/config:/app/config:rw"
    ];
    ports = [
      "5055:5055/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--health-cmd=wget --no-verbose --tries=1 --spider http://localhost:5055/api/v1/status || exit 1"
      "--health-interval=15s"
      "--health-retries=3"
      "--health-start-period=20s"
      "--health-timeout=3s"
      "--network-alias=jellyseerr"
      "--network=jellyseerr_default"
    ];
  };
  systemd.services."docker-jellyseerr" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-jellyseerr_default.service"
      "docker.service"
    ];
    requires = [
      "docker-network-jellyseerr_default.service"
      "docker.service"
    ];
    partOf = [
      "docker-compose-jellyseerr-root.target"
    ];
    wantedBy = [
      "docker-compose-jellyseerr-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-jellyseerr_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f jellyseerr_default";
    };
    script = ''
      docker network inspect jellyseerr_default || docker network create jellyseerr_default
    '';
    partOf = [ "docker-compose-jellyseerr-root.target" ];
    wantedBy = [ "docker-compose-jellyseerr-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-jellyseerr-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}

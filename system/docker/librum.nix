# Auto-generated using compose2nix v0.3.3-pre.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."librum" = {
    image = "ghcr.io/librum-reader/librum-server:latest";
    environment = {
      "AdminEmail" = "admin@example.com";
      "AdminPassword" = "strongPassword123";
      "DBConnectionString" = "Server=mariadb;port=3306;Database=librum;Uid=librum;Pwd=mariadb;";
      "JWTKey" = "exampleOfALongSecretToken";
      "JWTValidIssuer" = "exampleIssuer";
      "SMTPEndpoint" = "smtp.example.com";
      "SMTPMailFrom" = "mailuser123@example.com";
      "SMTPPassword" = "smtpUserPassword123";
      "SMTPUsername" = "mailuser123";
    };
    volumes = [
      "librum:/var/lib/librum-server/librum_storage:rw"   # Librum Storage
    ];
    ports = [
      "5000:5000/tcp"
    ];
    dependsOn = [
      "librum_db"
    ];
    log-driver = "journald";
    extraOptions = [
      "--hostname=librum"
      "--network-alias=librum"
      "--network=librum"
    ];
  };
  systemd.services."docker-librum" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-librum.service"
      "docker-volume-librum.service"
    ];
    requires = [
      "docker-network-librum.service"
      "docker-volume-librum.service"
    ];
    partOf = [
      "docker-compose-librum-root.target"
    ];
    wantedBy = [
      "docker-compose-librum-root.target"
    ];
  };
  virtualisation.oci-containers.containers."librum_db" = {
    image = "mariadb:latest";
    environment = {
      "MARIADB_DATABASE" = "librum";
      "MARIADB_PASSWORD" = "mariadb";
      "MARIADB_ROOT_PASSWORD" = "mariadb";
      "MARIADB_USER" = "librum";
    };
    volumes = [
      "librum_db:/var/lib/mysql:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--health-cmd=[\"mariadb-admin\", \"ping\", \"-u\", \"librum\", \"-p'mariadb'\", \"-h\", \"localhost\"]"
      "--health-interval=20s"
      "--health-retries=3"
      "--health-start-period=30s"
      "--health-timeout=40s"
      "--hostname=mariadb"
      "--network-alias=librum_db"
      "--network=librum"
    ];
  };
  systemd.services."docker-librum_db" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-librum.service"
      "docker-volume-librum_db.service"
    ];
    requires = [
      "docker-network-librum.service"
      "docker-volume-librum_db.service"
    ];
    partOf = [
      "docker-compose-librum-root.target"
    ];
    wantedBy = [
      "docker-compose-librum-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-librum" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f librum";
    };
    script = ''
      docker network inspect librum || docker network create librum
    '';
    partOf = [ "docker-compose-librum-root.target" ];
    wantedBy = [ "docker-compose-librum-root.target" ];
  };

  # Volumes
  systemd.services."docker-volume-librum" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      docker volume inspect librum || docker volume create librum
    '';
    partOf = [ "docker-compose-librum-root.target" ];
    wantedBy = [ "docker-compose-librum-root.target" ];
  };
  systemd.services."docker-volume-librum_db" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      docker volume inspect librum_db || docker volume create librum_db
    '';
    partOf = [ "docker-compose-librum-root.target" ];
    wantedBy = [ "docker-compose-librum-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-librum-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
